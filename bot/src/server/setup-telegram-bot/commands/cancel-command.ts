import { buildCommand } from '../builder'
import { getSessionByTelegramId } from '../../external'
import { CITY_COMMAND } from '../common'
import { formatCommand } from '../tools'
import { updateSessionCommand } from './update-session-command'

export const cancelCommand = buildCommand(
  'cancelCommand',
  async ({ readExecutor, tgUser, publicHttpApi, send, log }, _, { runCommand }) => {
    try {
      log('CANCEL')

      const session = await readExecutor.execute(getSessionByTelegramId, { telegramId: tgUser.id })

      if (session) {
        if (session.state === 'creatingProductsRequest') {
          return runCommand(updateSessionCommand, { state: 'idle' })
        }

        if (session.state === 'creatingChangeCityRequest') {
          await runCommand(updateSessionCommand, { state: 'idle' })
          return send('‚ùå –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω')
        }

        if (session.state === 'choosingCity' || session.state === 'confirmingCity') {
          if (session.activeChangeCityRequestId) {
            await publicHttpApi.changeCityRequest.POST.cancel({
              changeCityRequestId: session.activeChangeCityRequestId,
              userId: session.userId,
            })
          }

          return runCommand(updateSessionCommand, { state: 'idle' })
        }
      }

      await runCommand(updateSessionCommand, { state: 'idle' })
      send('üíÅ‚Äç‚ôÇÔ∏è –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å, –±—Ä–æ')
    } catch (e) {
      log(e instanceof Error ? e.message : String(e))
      send(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã ${formatCommand(CITY_COMMAND)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –ø–∂`)
    }
  }
)
