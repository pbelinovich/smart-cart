import { IProductsRequestEntity, PriceCategory, ProductsRequestStatus } from '@server'
import { html } from 'teleform'
import { formatError } from './format-error'

type StatusToFormatterMap = {
  [key in ProductsRequestStatus]: ((productsRequest: IProductsRequestEntity) => string) | string
}

const priceCategoryEmoji: Record<PriceCategory, string> = {
  cheapest: 'üí∏',
  popular: 'üî•',
  mostExpensive: 'üí∞',
}

const errorStatusToFormatterMap: StatusToFormatterMap = {
  created: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–±–æ—Ä –∫–æ—Ä–∑–∏–Ω',
  productsParsing: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–µ–≥–æ —Å–ø–∏—Å–∫–∞',
  productsParsed: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –±—ã–ª –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
  productsCollecting: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ—Ö–æ–¥–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º',
  productsCollected: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∫–æ—Ä–∑–∏–Ω—ã –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã',
}

const statusToFormatterMap: Partial<StatusToFormatterMap> = {
  created: '‚òëÔ∏è –°–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±–æ—Ä –∫–æ—Ä–∑–∏–Ω. –û–∂–∏–¥–∞–π, –±—Ä–æ',
  productsParsing: 'üïì –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–π —Å–ø–∏—Å–æ–∫...',
  productsParsed: productsRequest => {
    if (!productsRequest.aiProducts.length) {
      return 'ü§ñ –Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞'
    }

    const items = productsRequest.aiProducts.map(p => `‚Ä¢ ${p.name} x${p.quantity} ${priceCategoryEmoji[p.priceCategory]}`).join('\n')

    return [html.bold('ü§ñ –¢–≤–æ–π –∑–∞–ø—Ä–æ—Å:'), items].join('\n')
  },
  productsCollecting: 'üïì –°–æ–±–∏—Ä–∞—é –∫–æ—Ä–∑–∏–Ω—ã...',
}

export const ZERO_CARTS_LENGTH_ERROR = '‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏'

export const formatErrorProductsRequest = (productsRequest: IProductsRequestEntity) => {
  const formatter = errorStatusToFormatterMap[productsRequest.status]
  return formatError(typeof formatter === 'function' ? formatter(productsRequest) : formatter)
}

export const formatProductsRequest = (productsRequest: IProductsRequestEntity) => {
  const formatter = statusToFormatterMap[productsRequest.status]

  if (typeof formatter === 'function') {
    return formatter(productsRequest)
  }

  return formatter
}
